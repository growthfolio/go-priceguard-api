# PriceGuard API Makefile
.PHONY: help clean build dev down logs test migrate-up migrate-down

# Default target
.DEFAULT_GOAL := help

# Colors for output
CYAN := \033[36m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
RESET := \033[0m

help: ## Show this help message
	@echo "$(CYAN)PriceGuard API - Development Commands$(RESET)"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"} /^[a-zA-Z_-]+:.*##/ { printf "  $(GREEN)%-15s$(RESET) %s\n", $$1, $$2 }' $(MAKEFILE_LIST)

clean: ## Clean Docker environment (remove all containers, volumes, and images)
	@echo "$(YELLOW)🧹 Cleaning Docker environment...$(RESET)"
	docker-compose -f docker-compose.yml down -v --remove-orphans || true
	docker system prune -af --volumes || true
	@echo "$(GREEN)✅ Environment cleaned!$(RESET)"

build: ## Build the application containers
	@echo "$(YELLOW)🔨 Building containers...$(RESET)"
	docker-compose -f docker-compose.yml build --no-cache

dev: clean ## Start development environment (clean + build + run)
	@echo "$(CYAN)🚀 Starting PriceGuard API development environment...$(RESET)"
	docker-compose -f docker-compose.yml up --build -d
	@echo "$(GREEN)✅ Development environment started!$(RESET)"
	@echo ""
	@echo "$(CYAN)📊 Services:$(RESET)"
	@echo "  • API:           http://localhost:8080"
	@echo "  • Health Check:  http://localhost:8080/health"
	@echo "  • Database:      localhost:5432"
	@echo "  • Redis:         localhost:6379"
	@echo ""
	@echo "$(CYAN)📋 Useful commands:$(RESET)"
	@echo "  • make logs     - View logs"
	@echo "  • make down     - Stop services"
	@echo "  • make test     - Run tests"

start: ## Start services without rebuilding
	@echo "$(YELLOW)▶️  Starting services...$(RESET)"
	docker-compose -f docker-compose.yml up -d
	@echo "$(GREEN)✅ Services started!$(RESET)"

down: ## Stop development environment
	@echo "$(YELLOW)⏹️  Stopping development environment...$(RESET)"
	docker-compose -f docker-compose.yml down
	@echo "$(GREEN)✅ Environment stopped!$(RESET)"

logs: ## View logs from all services
	docker-compose -f docker-compose.yml logs -f

logs-api: ## View logs from API service only
	docker-compose -f docker-compose.yml logs -f api

status: ## Show status of all services
	@echo "$(CYAN)📊 Service Status:$(RESET)"
	docker-compose -f docker-compose.yml ps

shell: ## Access API container shell
	docker-compose -f docker-compose.yml exec api sh

db-shell: ## Access database shell
	docker-compose -f docker-compose.yml exec postgres psql -U postgres -d priceguard

redis-shell: ## Access Redis shell
	docker-compose -f docker-compose.yml exec redis redis-cli

test: ## Run tests
	@echo "$(YELLOW)🧪 Running tests...$(RESET)"
	docker-compose -f docker-compose.yml exec api go test ./...

test-verbose: ## Run tests with verbose output
	@echo "$(YELLOW)🧪 Running tests (verbose)...$(RESET)"
	docker-compose -f docker-compose.yml exec api go test -v ./...

migrate-up: ## Run database migrations up
	@echo "$(YELLOW)📈 Running migrations up...$(RESET)"
	docker-compose -f docker-compose.yml exec api go run cmd/migrate/main.go up

migrate-down: ## Run database migrations down
	@echo "$(YELLOW)📉 Running migrations down...$(RESET)"
	docker-compose -f docker-compose.yml exec api go run cmd/migrate/main.go down

migrate-status: ## Check migration status
	@echo "$(YELLOW)📊 Checking migration status...$(RESET)"
	docker-compose -f docker-compose.yml exec api go run cmd/migrate/main.go status

restart: ## Restart all services
	@echo "$(YELLOW)🔄 Restarting services...$(RESET)"
	docker-compose -f docker-compose.yml restart

restart-api: ## Restart only API service
	@echo "$(YELLOW)🔄 Restarting API service...$(RESET)"
	docker-compose -f docker-compose.yml restart api

health: ## Check health of all services
	@echo "$(CYAN)🏥 Health Check:$(RESET)"
	@echo "API Health:" && curl -s http://localhost:8080/health | jq . || echo "API not responding"
	@echo "Database:" && docker-compose -f docker-compose.yml exec postgres pg_isready -U postgres || echo "Database not ready"
	@echo "Redis:" && docker-compose -f docker-compose.yml exec redis redis-cli ping || echo "Redis not ready"

backup-db: ## Backup database
	@echo "$(YELLOW)💾 Backing up database...$(RESET)"
	docker-compose -f docker-compose.yml exec postgres pg_dump -U postgres priceguard > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)✅ Database backed up!$(RESET)"

# Development helpers
dev-full: clean build migrate-up ## Full development setup (clean + build + migrate)
	@echo "$(GREEN)🎉 Full development environment ready!$(RESET)"

quick-start: start health ## Quick start (no rebuild)
	@echo "$(GREEN)⚡ Quick start complete!$(RESET)"
