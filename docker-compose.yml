version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: priceguard-postgres
    environment:
      POSTGRES_DB: priceguard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d priceguard"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - priceguard-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: priceguard-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - priceguard-network

  # PriceGuard API (Development)
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: priceguard-api
    ports:
      - "8080:8080"
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSL_MODE: ${DB_SSL_MODE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URL: ${GOOGLE_REDIRECT_URL}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_API_SECRET: ${BINANCE_API_SECRET}
      BINANCE_TESTNET: ${BINANCE_TESTNET}
      PORT: ${PORT}
      HOST: ${HOST}
      GIN_MODE: ${GIN_MODE}
      APP_ENV: ${APP_ENV}
      LOG_LEVEL: ${LOG_LEVEL}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      
    volumes:
      - .:/app
      - /app/tmp
      - /app/bin
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - priceguard-network
    restart: unless-stopped

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: priceguard-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      POSTGRES_PASSWORD: password
    depends_on:
      - postgres
    networks:
      - priceguard-network

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: priceguard-redis-commander
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - priceguard-network

networks:
  priceguard-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
