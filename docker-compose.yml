version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: priceguard-postgres
    environment:
      POSTGRES_DB: priceguard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - priceguard-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: priceguard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - priceguard-network

  # PriceGuard API (Development)
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: priceguard-api
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - GIN_MODE=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=priceguard
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=development_jwt_secret_change_in_production
      - APP_ENV=development
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/bin
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - priceguard-network
    command: air

  # Adminer for Database Management (Optional)
  adminer:
    image: adminer:latest
    container_name: priceguard-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - priceguard-network

  # Redis Commander for Redis Management (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: priceguard-redis-commander
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - priceguard-network

# Networks
networks:
  priceguard-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
