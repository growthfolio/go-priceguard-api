name: CI/CD Pipeline - PriceGuard API

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.21'
  DEBUG: ${{ secrets.DEBUG || 'false' }}

jobs:
  test:
    name: Tests & Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: priceguard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug - Show environment info
        if: env.DEBUG == 'true'
        run: |
          echo "üîç Debug Mode Enabled"
          echo "Runner OS: ${{ runner.os }}"
          echo "GitHub Event: ${{ github.event_name }}"
          echo "Branch/Tag: ${{ github.ref }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Debug - Go environment
        run: |
          echo "üìã Go Environment Info:"
          go version
          go env GOPATH
          go env GOCACHE
          echo "Go modules status:"
          go mod tidy -v || true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          go mod download -x
          go mod verify
          echo "‚úÖ Dependencies installed successfully"

      - name: Debug - Verify services health
        run: |
          echo "üè• Checking services health..."
          echo "PostgreSQL status:"
          pg_isready -h localhost -p 5432 -U postgres || echo "‚ùå PostgreSQL not ready"
          echo "Redis status:"
          redis-cli -h localhost -p 6379 ping || echo "‚ùå Redis not ready"
          echo "Services check completed"

      - name: Run security scan (Gosec)
        uses: securego/gosec@v2.22.0
        with:
          args: '-fmt sarif -out gosec-results.sarif -verbose ./...'
        continue-on-error: true

      - name: Debug - Security scan results
        run: |
          echo "üîí Security Scan Results:"
          if [ -f "gosec-results.sarif" ]; then
            echo "SARIF file size: $(wc -c < gosec-results.sarif) bytes"
            echo "--- SARIF Preview (first 30 lines) ---"
            head -n 30 gosec-results.sarif
            echo "--- End Preview ---"
          else
            echo "‚ùå SARIF file not generated"
          fi

      - name: Upload Gosec SARIF results
        if: success() && hashFiles('gosec-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
        continue-on-error: true

      - name: Run linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m --verbose
        continue-on-error: true

      - name: Debug - Pre-test environment
        run: |
          echo "üß™ Pre-test Environment Check:"
          echo "Database connection test:"
          PGPASSWORD=postgres psql -h localhost -U postgres -d priceguard_test -c "SELECT version();" || echo "‚ùå DB connection failed"
          echo "Redis connection test:"
          redis-cli -h localhost -p 6379 info server | head -5 || echo "‚ùå Redis connection failed"

      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests with coverage..."
          make test-unit-coverage || {
            echo "‚ùå Unit tests failed"
            exit 1
          }
          echo "‚úÖ Unit tests completed"
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: priceguard_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret-key

      - name: Debug - Test coverage analysis
        if: always()
        run: |
          echo "üìä Test Coverage Analysis:"
          if [ -f "coverage.out" ]; then
            echo "Coverage file size: $(wc -c < coverage.out) bytes"
            echo "Coverage summary:"
            go tool cover -func=coverage.out | tail -1 || echo "‚ùå Could not generate coverage summary"
          else
            echo "‚ùå Coverage file not found"
          fi

      - name: Run integration tests
        run: |
          echo "üîó Running integration tests..."
          make test-integration || {
            echo "‚ùå Integration tests failed"
            # Show recent logs for debugging
            echo "Recent application logs:"
            ls -la logs/ 2>/dev/null || echo "No logs directory found"
            exit 1
          }
          echo "‚úÖ Integration tests completed"
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: priceguard_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret-key

      - name: Run performance benchmarks
        run: |
          echo "‚ö° Running performance benchmarks..."
          make benchmark-all || {
            echo "‚ùå Benchmarks failed"
            exit 1
          }
          echo "‚úÖ Benchmarks completed"
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: priceguard_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            coverage.out
            coverage.html
            reports/
            gosec-results.sarif
            logs/
          retention-days: 30
            
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    timeout-minutes: 20
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - Build context
        run: |
          echo "üèóÔ∏è Build Context Info:"
          echo "Workspace: ${{ github.workspace }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Checking Dockerfile..."
          ls -la Dockerfile || echo "‚ùå Dockerfile not found"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Debug - Metadata output
        run: |
          echo "üè∑Ô∏è Docker Metadata:"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Labels: ${{ steps.meta.outputs.labels }}"
          echo "Version: ${{ steps.meta.outputs.version }}"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            GO_VERSION=${{ env.GO_VERSION }}
            ENV=production
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}

      - name: Output image reference
        id: image
        run: |
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}"
          echo "image=${IMAGE_REF}" >> $GITHUB_OUTPUT
          echo "üê≥ Built image: ${IMAGE_REF}"
          echo "üìä Digest: ${{ steps.build.outputs.digest }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    timeout-minutes: 15

    steps:
      - name: Debug - Security scan setup
        run: |
          echo "üîç Security Scan Info:"
          echo "Image to scan: ${{ needs.build.outputs.image }}"
          echo "Digest: ${{ needs.build.outputs.digest }}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Debug - Trivy results
        if: always()
        run: |
          echo "üõ°Ô∏è Trivy Scan Results:"
          if [ -f "trivy-results.sarif" ]; then
            echo "SARIF file size: $(wc -c < trivy-results.sarif) bytes"
            echo "Vulnerabilities found:"
            grep -o '"level":"[^"]*"' trivy-results.sarif | sort | uniq -c || echo "No vulnerabilities pattern found"
          else
            echo "‚ùå Trivy results file not found"
          fi

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - Deployment context
        run: |
          echo "üöÄ Staging Deployment Info:"
          echo "Image: ${{ needs.build.outputs.image }}"
          echo "Environment: staging"
          echo "Namespace: priceguard-staging"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "‚öôÔ∏è Configuring kubectl..."
          mkdir -p ~/.kube
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
          echo "üîç Kubectl configuration test:"
          kubectl config current-context || echo "‚ùå Could not get current context"
          kubectl get nodes || echo "‚ùå Could not list nodes"

      - name: Pre-deployment checks
        run: |
          echo "üîç Pre-deployment checks:"
          kubectl get deployment priceguard-api -n priceguard-staging -o wide || echo "No existing deployment"
          kubectl get pods -n priceguard-staging -l app=priceguard-api || echo "No existing pods"

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging..."
          echo "Updating deployment image to: ${{ needs.build.outputs.image }}"
          
          sed -i "s|priceguard/api:latest|${{ needs.build.outputs.image }}|g" k8s/deployment.yaml
          
          echo "üìã Deployment manifest preview:"
          grep -A 5 -B 5 "image:" k8s/deployment.yaml || echo "Could not preview manifest"
          
          kubectl apply -f k8s/ -n priceguard-staging
          
          echo "‚è≥ Waiting for rollout to complete..."
          kubectl rollout status deployment/priceguard-api -n priceguard-staging --timeout=600s

      - name: Post-deployment status
        if: always()
        run: |
          echo "üìä Post-deployment status:"
          kubectl get deployment priceguard-api -n priceguard-staging -o wide
          kubectl get pods -n priceguard-staging -l app=priceguard-api -o wide
          kubectl describe pods -n priceguard-staging -l app=priceguard-api | tail -20

      - name: Run smoke tests
        run: |
          echo "üî• Running smoke tests..."
          kubectl wait --for=condition=ready pod -l app=priceguard-api -n priceguard-staging --timeout=300s
          
          STAGING_URL="https://staging-api.priceguard.io"
          echo "Testing endpoints:"
          
          echo "‚úÖ Health check..."
          curl -f -v $STAGING_URL/health || {
            echo "‚ùå Health check failed"
            kubectl logs -n priceguard-staging -l app=priceguard-api --tail=50
            exit 1
          }
          
          echo "‚úÖ API health check..."
          curl -f -v $STAGING_URL/api/v1/health || {
            echo "‚ùå API health check failed"
            exit 1
          }
          
          echo "‚úÖ All smoke tests passed!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - Production deployment context
        run: |
          echo "üè≠ Production Deployment Info:"
          echo "Image: ${{ needs.build.outputs.image }}"
          echo "Tag: ${{ github.ref }}"
          echo "Environment: production"
          echo "Namespace: priceguard"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "‚öôÔ∏è Configuring kubectl for production..."
          mkdir -p ~/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
          echo "üîç Production cluster info:"
          kubectl config current-context
          kubectl get nodes --no-headers | wc -l | xargs echo "Nodes count:"

      - name: Pre-deployment backup and checks
        run: |
          echo "üíæ Creating pre-deployment backup..."
          kubectl get deployment priceguard-api -n priceguard -o yaml > backup-deployment.yaml
          
          echo "üìä Current production status:"
          kubectl get deployment priceguard-api -n priceguard -o wide || echo "No existing deployment"
          kubectl get pods -n priceguard -l app=priceguard-api -o wide || echo "No existing pods"
          
          echo "üìà Resource usage before deployment:"
          kubectl top pods -n priceguard -l app=priceguard-api || echo "Metrics not available"

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          echo "Image: ${{ needs.build.outputs.image }}"
          
          sed -i "s|priceguard/api:latest|${{ needs.build.outputs.image }}|g" k8s/deployment.yaml
          
          echo "üìã Production deployment manifest:"
          grep -A 10 -B 5 "image:" k8s/deployment.yaml
          
          kubectl apply -f k8s/ -n priceguard
          
          echo "‚è≥ Waiting for production rollout..."
          kubectl rollout status deployment/priceguard-api -n priceguard --timeout=900s

      - name: Post-deployment verification
        run: |
          echo "‚úÖ Running post-deployment verification..."
          kubectl wait --for=condition=ready pod -l app=priceguard-api -n priceguard --timeout=300s
          
          PROD_URL="https://api.priceguard.io"
          
          echo "üîç Testing production endpoints:"
          
          echo "Health endpoint..."
          curl -f --max-time 30 $PROD_URL/health || {
            echo "‚ùå Health check failed"
            kubectl logs -n priceguard -l app=priceguard-api --tail=100
            exit 1
          }
          
          echo "API health endpoint..."
          curl -f --max-time 30 $PROD_URL/api/v1/health || {
            echo "‚ùå API health check failed"
            exit 1
          }
          
          echo "Metrics endpoint..."
          curl -f --max-time 30 $PROD_URL/metrics || {
            echo "‚ùå Metrics check failed"
            exit 1
          }
          
          echo "üìä Post-deployment status:"
          kubectl get deployment priceguard-api -n priceguard -o wide
          kubectl get pods -n priceguard -l app=priceguard-api -o wide

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üè∑Ô∏è Deployed version: ${{ github.ref_name }}"
          echo "üê≥ Image: ${{ needs.build.outputs.image }}"
          echo "‚è∞ Deployment time: $(date -u)"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed! Initiating rollback..."
          
          echo "üìä Current pod status:"
          kubectl get pods -n priceguard -l app=priceguard-api -o wide
          
          echo "üìú Recent pod logs:"
          kubectl logs -n priceguard -l app=priceguard-api --tail=100 --since=5m || echo "Could not fetch logs"
          
          echo "üîÑ Rolling back deployment..."
          kubectl rollout undo deployment/priceguard-api -n priceguard
          kubectl rollout status deployment/priceguard-api -n priceguard --timeout=300s
          
          echo "‚úÖ Rollback completed"

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    timeout-minutes: 10

    steps:
      - name: Debug - Cleanup context
        run: |
          echo "üßπ Cleanup Job Info:"
          echo "Staging deployed: ${{ needs.deploy-staging.result }}"
          echo "Production deployed: ${{ needs.deploy-production.result }}"

      - name: Cleanup old container images
        run: |
          echo "üßπ Starting cleanup of old images..."
          echo "This is a placeholder for actual cleanup logic"
          echo "In a real scenario, you would:"
          echo "1. List old images in the registry"
          echo "2. Keep last N versions"
          echo "3. Delete older versions"
          echo "‚úÖ Cleanup completed"

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v') && needs.deploy-production.result == 'success'
    timeout-minutes: 15

    steps:
      - name: Debug - Performance monitoring setup
        run: |
          echo "üìä Performance Monitoring Info:"
          echo "Production deployment result: ${{ needs.deploy-production.result }}"
          echo "Deployed image: ${{ needs.build.outputs.image }}"

      - name: Wait for application warmup
        run: |
          echo "‚è≥ Waiting for application warmup (2 minutes)..."
          sleep 120

      - name: Run performance tests
        run: |
          echo "‚ö° Running post-deployment performance tests..."
          
          PROD_URL="https://api.priceguard.io"
          
          echo "üîç Basic performance check:"
          for i in {1..5}; do
            echo "Request $i:"
            curl -w "Time: %{time_total}s, Status: %{http_code}\n" -s -o /dev/null $PROD_URL/health
            sleep 2
          done

      - name: Monitor production metrics
        run: |
          echo "üìà Monitoring production metrics..."
          
          # This would integrate with your monitoring system
          echo "Placeholder for metrics collection:"
          echo "- CPU usage"
          echo "- Memory usage" 
          echo "- Response times"
          echo "- Error rates"
          echo "- Database connections"
          
          echo "‚úÖ Performance monitoring completed"
