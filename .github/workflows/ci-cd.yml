name: CI/CD Pipeline - PriceGuard API

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.21'

jobs:
  # Job 1: Testes e Análise de Qualidade
  test:
    name: Tests & Quality Analysis
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: priceguard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
        
    - name: Run linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Run unit tests
      run: |
        make test-unit-coverage
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: priceguard_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key

    - name: Run integration tests
      run: |
        make test-integration
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: priceguard_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key

    - name: Run performance benchmarks
      run: |
        make benchmark-all
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: priceguard_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.out
          coverage.html
          reports/

  # Job 2: Build e Push da Imagem Docker
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          GO_VERSION=${{ env.GO_VERSION }}

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # Job 3: Análise de Segurança da Imagem
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4: Deploy para Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Deploy to staging
      run: |
        # Substituir imagem nos manifests
        sed -i "s|priceguard/api:latest|${{ needs.build.outputs.image }}|g" k8s/deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/ -n priceguard-staging
        
        # Wait for rollout
        kubectl rollout status deployment/priceguard-api -n priceguard-staging --timeout=600s

    - name: Run smoke tests
      run: |
        # Aguardar serviço ficar disponível
        kubectl wait --for=condition=ready pod -l app=priceguard-api -n priceguard-staging --timeout=300s
        
        # Executar testes básicos
        STAGING_URL="https://staging-api.priceguard.io"
        curl -f $STAGING_URL/health || exit 1
        curl -f $STAGING_URL/api/v1/health || exit 1

  # Job 5: Deploy para Produção
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Pre-deployment backup
      run: |
        # Backup da configuração atual
        kubectl get deployment priceguard-api -n priceguard -o yaml > backup-deployment.yaml
        
        # Upload backup para S3/storage
        # aws s3 cp backup-deployment.yaml s3://priceguard-backups/$(date +%Y%m%d-%H%M%S)/

    - name: Deploy to production
      run: |
        # Substituir imagem nos manifests
        sed -i "s|priceguard/api:latest|${{ needs.build.outputs.image }}|g" k8s/deployment.yaml
        
        # Apply manifests com estratégia rolling update
        kubectl apply -f k8s/ -n priceguard
        
        # Wait for rollout com timeout maior
        kubectl rollout status deployment/priceguard-api -n priceguard --timeout=900s

    - name: Post-deployment verification
      run: |
        # Verificar pods saudáveis
        kubectl wait --for=condition=ready pod -l app=priceguard-api -n priceguard --timeout=300s
        
        # Testes de health check
        PROD_URL="https://api.priceguard.io"
        curl -f $PROD_URL/health || exit 1
        curl -f $PROD_URL/api/v1/health || exit 1
        
        # Verificar métricas básicas
        curl -f $PROD_URL/metrics || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        # Notificar Slack/Discord/etc sobre deploy bem-sucedido

    - name: Rollback on failure
      if: failure()
      run: |
        echo "❌ Production deployment failed! Rolling back..."
        kubectl rollout undo deployment/priceguard-api -n priceguard
        kubectl rollout status deployment/priceguard-api -n priceguard --timeout=300s

  # Job 6: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Cleanup old images
      run: |
        # Manter apenas as últimas 10 imagens
        # (implementar lógica de limpeza de registry)
        echo "Cleanup completed"

  # Job 7: Performance Monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Run performance tests
      run: |
        # Executar testes de carga pós-deploy
        echo "Running post-deployment performance tests..."
        
        # k6 load testing example
        # k6 run --vus 100 --duration 5m performance-tests/load-test.js

    - name: Monitor metrics
      run: |
        # Verificar métricas de performance
        echo "Monitoring production metrics..."
        
        # Verificar se métricas estão normais
        # curl -s "http://prometheus:9090/api/v1/query?query=up{job='priceguard-api'}" | jq '.data.result[0].value[1]' | grep -q "1"
