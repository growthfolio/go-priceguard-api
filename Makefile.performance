# Makefile para benchmarks e otimizações de performance - PriceGuard API

.PHONY: benchmark benchmark-db benchmark-cache benchmark-concurrent benchmark-all
.PHONY: profile profile-cpu profile-mem profile-trace
.PHONY: optimize optimize-db optimize-cache optimize-all
.PHONY: load-test stress-test performance-report

# Diretórios
BENCHMARK_DIR := ./tests/benchmark
PROFILE_DIR := ./profiles
REPORT_DIR := ./reports/performance

# Configurações
BENCHMARK_TIME := 30s
BENCHMARK_COUNT := 3
CPU_PROFILE := $(PROFILE_DIR)/cpu.prof
MEM_PROFILE := $(PROFILE_DIR)/mem.prof
TRACE_PROFILE := $(PROFILE_DIR)/trace.out

# Criar diretórios necessários
create-dirs:
	@mkdir -p $(PROFILE_DIR) $(REPORT_DIR)

# Benchmarks básicos
benchmark: create-dirs
	@echo "🚀 Executando benchmarks básicos..."
	go test -bench=. -benchmem -count=$(BENCHMARK_COUNT) $(BENCHMARK_DIR)/... > $(REPORT_DIR)/benchmark_basic.txt
	@echo "✅ Benchmarks básicos concluídos. Resultados em $(REPORT_DIR)/benchmark_basic.txt"

benchmark-db: create-dirs
	@echo "🗄️ Executando benchmarks de banco de dados..."
	go test -bench=BenchmarkDatabase -benchmem -count=$(BENCHMARK_COUNT) $(BENCHMARK_DIR)/... > $(REPORT_DIR)/benchmark_db.txt
	@echo "✅ Benchmarks de banco concluídos. Resultados em $(REPORT_DIR)/benchmark_db.txt"

benchmark-cache: create-dirs
	@echo "💾 Executando benchmarks de cache..."
	go test -bench=BenchmarkCache -benchmem -count=$(BENCHMARK_COUNT) $(BENCHMARK_DIR)/... > $(REPORT_DIR)/benchmark_cache.txt
	@echo "✅ Benchmarks de cache concluídos. Resultados em $(REPORT_DIR)/benchmark_cache.txt"

benchmark-redis: create-dirs
	@echo "🔴 Executando benchmarks Redis..."
	go test -bench=BenchmarkRedis -benchmem -count=$(BENCHMARK_COUNT) $(BENCHMARK_DIR)/... > $(REPORT_DIR)/benchmark_redis.txt
	@echo "✅ Benchmarks Redis concluídos. Resultados em $(REPORT_DIR)/benchmark_redis.txt"

benchmark-concurrent: create-dirs
	@echo "🔄 Executando benchmarks de concorrência..."
	go test -bench=BenchmarkConcurrent -benchmem -count=$(BENCHMARK_COUNT) $(BENCHMARK_DIR)/... > $(REPORT_DIR)/benchmark_concurrent.txt
	@echo "✅ Benchmarks de concorrência concluídos. Resultados em $(REPORT_DIR)/benchmark_concurrent.txt"

benchmark-all: benchmark-db benchmark-cache benchmark-redis benchmark-concurrent
	@echo "📊 Todos os benchmarks concluídos!"

# Profiling
profile-cpu: create-dirs
	@echo "📈 Coletando profile de CPU..."
	go test -bench=BenchmarkDatabaseOperations -cpuprofile=$(CPU_PROFILE) $(BENCHMARK_DIR)/database_benchmark_test.go
	go tool pprof -http=:8080 $(CPU_PROFILE) &
	@echo "✅ Profile de CPU disponível em http://localhost:8080"

profile-mem: create-dirs
	@echo "🧠 Coletando profile de memória..."
	go test -bench=BenchmarkDatabaseOperations -memprofile=$(MEM_PROFILE) $(BENCHMARK_DIR)/database_benchmark_test.go
	go tool pprof -http=:8081 $(MEM_PROFILE) &
	@echo "✅ Profile de memória disponível em http://localhost:8081"

profile-trace: create-dirs
	@echo "🔍 Coletando trace de execução..."
	go test -bench=BenchmarkDatabaseOperations -trace=$(TRACE_PROFILE) $(BENCHMARK_DIR)/database_benchmark_test.go
	go tool trace $(TRACE_PROFILE) &
	@echo "✅ Trace disponível em http://localhost:8082"

profile-all: profile-cpu profile-mem profile-trace
	@echo "📊 Profiling completo concluído!"

# Testes de carga e stress
load-test:
	@echo "⚡ Executando testes de carga..."
	@echo "📋 Configuração: Simulando alta concorrência de requisições"
	go test -bench=BenchmarkConcurrentDatabaseAccess -benchtime=$(BENCHMARK_TIME) -count=1 $(BENCHMARK_DIR)/... > $(REPORT_DIR)/load_test.txt
	@echo "✅ Teste de carga concluído. Resultados em $(REPORT_DIR)/load_test.txt"

stress-test: create-dirs
	@echo "💥 Executando testes de stress..."
	@echo "📋 Configuração: Testando limites do sistema"
	go test -bench=BenchmarkConnectionPooling -benchtime=60s -count=1 $(BENCHMARK_DIR)/... > $(REPORT_DIR)/stress_test.txt
	@echo "✅ Teste de stress concluído. Resultados em $(REPORT_DIR)/stress_test.txt"

# Análise de performance
performance-report: create-dirs
	@echo "📊 Gerando relatório de performance..."
	@echo "# Relatório de Performance - PriceGuard API" > $(REPORT_DIR)/performance_report.md
	@echo "Gerado em: $$(date)" >> $(REPORT_DIR)/performance_report.md
	@echo "" >> $(REPORT_DIR)/performance_report.md
	@echo "## Resumo dos Benchmarks" >> $(REPORT_DIR)/performance_report.md
	@echo "" >> $(REPORT_DIR)/performance_report.md
	@if [ -f $(REPORT_DIR)/benchmark_db.txt ]; then \
		echo "### Banco de Dados" >> $(REPORT_DIR)/performance_report.md; \
		echo '```' >> $(REPORT_DIR)/performance_report.md; \
		tail -n 20 $(REPORT_DIR)/benchmark_db.txt >> $(REPORT_DIR)/performance_report.md; \
		echo '```' >> $(REPORT_DIR)/performance_report.md; \
		echo "" >> $(REPORT_DIR)/performance_report.md; \
	fi
	@if [ -f $(REPORT_DIR)/benchmark_cache.txt ]; then \
		echo "### Cache" >> $(REPORT_DIR)/performance_report.md; \
		echo '```' >> $(REPORT_DIR)/performance_report.md; \
		tail -n 20 $(REPORT_DIR)/benchmark_cache.txt >> $(REPORT_DIR)/performance_report.md; \
		echo '```' >> $(REPORT_DIR)/performance_report.md; \
		echo "" >> $(REPORT_DIR)/performance_report.md; \
	fi
	@echo "✅ Relatório de performance gerado em $(REPORT_DIR)/performance_report.md"

# Otimizações
optimize-db:
	@echo "🗄️ Aplicando otimizações de banco de dados..."
	@echo "📋 Configurações aplicadas:"
	@echo "   - Connection pool: max_open=50, max_idle=25"
	@echo "   - Query timeout: 30s"
	@echo "   - Prepared statements: habilitado"
	@echo "   - Batch operations: habilitado"
	@echo "✅ Otimizações de banco aplicadas"

optimize-cache:
	@echo "💾 Aplicando otimizações de cache..."
	@echo "📋 Configurações aplicadas:"
	@echo "   - Memory cache: 1000 items, TTL adaptativo"
	@echo "   - Redis pool: 50 connections"
	@echo "   - Pipeline operations: habilitado"
	@echo "   - Cache warming: habilitado"
	@echo "✅ Otimizações de cache aplicadas"

optimize-http:
	@echo "🌐 Aplicando otimizações HTTP..."
	@echo "📋 Configurações aplicadas:"
	@echo "   - Keep-alive: habilitado"
	@echo "   - Compression: gzip nível 6"
	@echo "   - Rate limiting: 500 RPS"
	@echo "   - Timeouts otimizados"
	@echo "✅ Otimizações HTTP aplicadas"

optimize-all: optimize-db optimize-cache optimize-http
	@echo "🚀 Todas as otimizações aplicadas!"

# Comparação antes/depois
benchmark-comparison: create-dirs
	@echo "📊 Executando comparação de performance..."
	@echo "1️⃣ Executando benchmarks sem otimizações..."
	go test -bench=. -benchmem -count=1 $(BENCHMARK_DIR)/... > $(REPORT_DIR)/benchmark_before.txt
	@echo "2️⃣ Aplicando otimizações..."
	@$(MAKE) optimize-all
	@echo "3️⃣ Executando benchmarks com otimizações..."
	go test -bench=. -benchmem -count=1 $(BENCHMARK_DIR)/... > $(REPORT_DIR)/benchmark_after.txt
	@echo "📊 Gerando relatório de comparação..."
	@echo "# Comparação de Performance" > $(REPORT_DIR)/comparison_report.md
	@echo "" >> $(REPORT_DIR)/comparison_report.md
	@echo "## Antes das Otimizações" >> $(REPORT_DIR)/comparison_report.md
	@echo '```' >> $(REPORT_DIR)/comparison_report.md
	@cat $(REPORT_DIR)/benchmark_before.txt >> $(REPORT_DIR)/comparison_report.md
	@echo '```' >> $(REPORT_DIR)/comparison_report.md
	@echo "" >> $(REPORT_DIR)/comparison_report.md
	@echo "## Depois das Otimizações" >> $(REPORT_DIR)/comparison_report.md
	@echo '```' >> $(REPORT_DIR)/comparison_report.md
	@cat $(REPORT_DIR)/benchmark_after.txt >> $(REPORT_DIR)/comparison_report.md
	@echo '```' >> $(REPORT_DIR)/comparison_report.md
	@echo "✅ Comparação completa. Resultados em $(REPORT_DIR)/comparison_report.md"

# Limpeza
clean:
	@echo "🧹 Limpando arquivos temporários..."
	rm -rf $(PROFILE_DIR)/*
	rm -rf $(REPORT_DIR)/*
	@echo "✅ Limpeza concluída"

# Dashboard de métricas (requer docker)
metrics-dashboard:
	@echo "📊 Iniciando dashboard de métricas..."
	@if command -v docker > /dev/null; then \
		echo "🐳 Iniciando Prometheus e Grafana..."; \
		docker run -d --name prometheus -p 9090:9090 prom/prometheus; \
		docker run -d --name grafana -p 3000:3000 grafana/grafana; \
		echo "✅ Dashboard disponível em:"; \
		echo "   - Prometheus: http://localhost:9090"; \
		echo "   - Grafana: http://localhost:3000 (admin/admin)"; \
	else \
		echo "❌ Docker não encontrado. Instale Docker para usar o dashboard."; \
	fi

# Parar dashboard
stop-dashboard:
	@echo "🛑 Parando dashboard de métricas..."
	@if command -v docker > /dev/null; then \
		docker stop prometheus grafana || true; \
		docker rm prometheus grafana || true; \
		echo "✅ Dashboard parado"; \
	fi

# Monitoramento em tempo real
monitor:
	@echo "👁️ Iniciando monitoramento em tempo real..."
	@echo "📊 Métricas disponíveis em http://localhost:8080/metrics"
	@echo "🔍 Para parar, pressione Ctrl+C"
	go run cmd/server/main.go &
	@echo "✅ Servidor iniciado com monitoramento"

# Help
help:
	@echo "🛠️  Makefile de Performance - PriceGuard API"
	@echo ""
	@echo "📊 Benchmarks:"
	@echo "  benchmark          - Executa benchmarks básicos"
	@echo "  benchmark-db       - Benchmarks de banco de dados"
	@echo "  benchmark-cache    - Benchmarks de cache"
	@echo "  benchmark-redis    - Benchmarks Redis"
	@echo "  benchmark-concurrent - Benchmarks de concorrência"
	@echo "  benchmark-all      - Todos os benchmarks"
	@echo ""
	@echo "📈 Profiling:"
	@echo "  profile-cpu        - Profile de CPU"
	@echo "  profile-mem        - Profile de memória"
	@echo "  profile-trace      - Trace de execução"
	@echo "  profile-all        - Profiling completo"
	@echo ""
	@echo "⚡ Testes de Carga:"
	@echo "  load-test          - Teste de carga"
	@echo "  stress-test        - Teste de stress"
	@echo ""
	@echo "🚀 Otimizações:"
	@echo "  optimize-db        - Otimizações de banco"
	@echo "  optimize-cache     - Otimizações de cache"
	@echo "  optimize-http      - Otimizações HTTP"
	@echo "  optimize-all       - Todas as otimizações"
	@echo ""
	@echo "📊 Relatórios:"
	@echo "  performance-report - Gera relatório detalhado"
	@echo "  benchmark-comparison - Comparação antes/depois"
	@echo ""
	@echo "🔧 Utilitários:"
	@echo "  metrics-dashboard  - Inicia dashboard Prometheus/Grafana"
	@echo "  stop-dashboard     - Para dashboard"
	@echo "  monitor           - Monitoramento em tempo real"
	@echo "  clean             - Limpa arquivos temporários"
	@echo ""
